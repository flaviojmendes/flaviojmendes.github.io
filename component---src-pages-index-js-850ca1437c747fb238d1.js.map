{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.js"],"names":["Bio","useStaticQuery","site","siteMetadata","author","social","className","xs","md","name","summary","BlogIndex","data","location","siteTitle","title","posts","allMarkdownRemark","edges","map","node","frontmatter","fields","slug","key","style","boxShadow","to","date","textAlign","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"6FAAA,yEAkDeA,IApCH,WACV,IADgB,EACHC,yBAAe,cAuBIC,KAAKC,aAA7BC,EAxBQ,EAwBRA,OAxBQ,EAwBAC,OAChB,OACE,kBAAC,IAAD,CAAKC,UAAW,WACd,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,IACjB,uBAAGF,UAAW,OAAd,cACa,gCAASF,EAAOK,MAD7B,IAC6CL,EAAOM,a,kCC3C1D,0HA6CeC,UAtCG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKV,KAAKC,aAAaY,MACnCC,EAAQJ,EAAKK,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNL,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBAAIjB,UAAW,cAEb,kBAAC,OAAD,CAAMmB,MAAO,CAAEC,UAAU,QAAWC,GAAIP,EAAKE,OAAOC,MACjDR,IAGL,+BAAQK,EAAKC,YAAYO,OAE3B,6BAASH,MAAO,CACdI,UAAW,YAEX,uBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAYW,aAAeZ,EAAKa,YAInD,mCAUL,IAAMC,EAAS","file":"component---src-pages-index-js-850ca1437c747fb238d1.js","sourcesContent":["/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Col from \"react-bootstrap/Col\"\r\n\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\r\n        childImageSharp {\r\n          fixed(width: 50, height: 50) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const { author, social } = data.site.siteMetadata\r\n  return (\r\n    <Row className={'row-bio'}>\r\n      <Col xs={12} md={12}>\r\n      <p className={'bio'}>\r\n        Written by <strong>{author.name}</strong> {author.summary}\r\n      </p>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const posts = data.allMarkdownRemark.edges\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title=\"All posts\" />\r\n      <Bio />\r\n      {posts.map(({ node }) => {\r\n        const title = node.frontmatter.title || node.fields.slug\r\n        return (\r\n          <article key={node.fields.slug}>\r\n            <header>\r\n              <h3 className={'post-title'}\r\n              >\r\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n                  {title}\r\n                </Link>\r\n              </h3>\r\n              <small>{node.frontmatter.date}</small>\r\n            </header>\r\n            <section style={{\r\n              textAlign: 'justify'\r\n            }}>\r\n              <p\r\n                dangerouslySetInnerHTML={{\r\n                  __html: node.frontmatter.description || node.excerpt,\r\n                }}\r\n              />\r\n            </section>\r\n            <hr/>\r\n          </article>\r\n        )\r\n      })}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}