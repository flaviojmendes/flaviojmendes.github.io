{"componentChunkName":"component---src-templates-blog-post-js","path":"/automating-a-whatsapp-group/","result":{"data":{"site":{"siteMetadata":{"title":"@flaviojmendes"}},"markdownRemark":{"id":"7404c3ce-2faf-5d8b-b0a7-c330c8dfefe6","excerpt":"Introduction Everything started when I received my first animated sticker on Whatsapp. \nI searched about how to create my own and saw that I couldn’t. \nJust…","html":"<h2>Introduction</h2>\n<p>Everything started when I received my first animated sticker on Whatsapp.\nI searched about how to create my own and saw that I couldn’t.\nJust downloading some unofficial versions of the app.</p>\n<p>Then doing a bit of research I found  <a href=\"%5Bhttps://github.com/open-wa/wa-automate-nodejs%5D\">wa-automate</a> an automating tool for Whatsapp.\nIt basically emulates a Web Session and listen to commands, having some predefined commands, such as sending messages, stickers, etc.</p>\n<hr>\n<h2>Ok, let’s have a bit of fun?</h2>\n<p>Based on that I started to have some ideas. Such as: </p>\n<p><strong>Q</strong>: Many times I keep searching a sticker that matches some reaction and lose the timing of the joke</p>\n<p><strong>A</strong>: Ok, so let’s do a command that sends a Sticker by the text.</p>\n<p><strong>Q</strong>: And when I want to send an Youtube video? It would be nice to send it directly from the chat..</p>\n<p><strong>A</strong>: Sure! Why not?</p>\n<p><strong>Q</strong>: And in that moments that people ask you something that is just doing a google search?</p>\n<p><strong>A</strong>: Yeah, just send a LMGTFY link!</p>\n<p>and many more…</p>\n<hr>\n<p>So I started <strong><a href=\"https://github.com/Futebot/futezap\">Futezap</a></strong>. </p>\n<p>The code to read the commands is very simple.</p>\n<p><strong>Writing an onMessage handler:</strong></p>\n<deckgo-highlight-code   terminal=\"none\" >\n          <code slot=\"code\">client.onMessage(async message =&gt; {\n    await handleMessage(message, client);\n});</code>\n        </deckgo-highlight-code>\n<p><strong>And then have a list of commands to compare the calls:</strong></p>\n<deckgo-highlight-code   terminal=\"none\" >\n          <code slot=\"code\">const commands = [\n       {prefix: &#39;.ping&#39;, function: sendPing},\n       {prefix: &#39;.help&#39;, function: sendHelp},\n       {prefix: &#39;.youtube&#39;, function: sendYoutubeURL},\n       {prefix: &#39;.lmgtfy&#39;, function: sendLMGTFY},\n       {prefix: &#39;.image&#39;, function: sendImage},\n       {prefix: &#39;.sticker&#39;, function: sendSticker},\n       {prefix: &#39;.gif&#39;, function: sendGifSticker},\n       {prefix: &#39;.groupimg&#39;, function: setGroupImage}\n   ]\n   \n   async function handleMessage(message: Message, client: Client) {\n   \n       if((message.caption &amp;&amp; !message.caption.startsWith(&quot;.&quot;)) &amp;&amp; (message.body &amp;&amp; !message.body.startsWith(&quot;.&quot;))) {\n           return;\n       }\n   \n       const commandCalled = message.caption ? message.caption : message.body;\n   \n       for (const command of commands) {\n           if(commandCalled === command.prefix) {\n               await command.function(message, client);\n           }\n       }\n   \n   }</code>\n        </deckgo-highlight-code>\n<p><strong>With that, it was up to my creativity to write the commands.\nFor example, to send a GIF Sticker based on a keyword searched on Google:</strong></p>\n<deckgo-highlight-code   terminal=\"none\" >\n          <code slot=\"code\">export async function sendGifSticker(message: Message, client: Client, attempt: number = 0) {\n\n    try {\n        const imgUrl = await getGifURLFromText(message.body.substr(message.body.indexOf(&#39; &#39;), message.body.length), attempt);\n        await client.sendStickerfromUrl(message.chatId, imgUrl);\n    } catch (e) {\n        attempt += 1;\n        if(attempt &lt; 5) await sendGifSticker(message, client, attempt);\n    }\n}\n\nexport async function getGifURLFromText(text: string, index: number = 0): string {\n    const asyncFunction = util.promisify(gis);\n    const opts = {\n        searchTerm: text,\n        queryStringAddition: &#39;&amp;tbs=itp:animated&#39;\n    };\n    const result: any = await asyncFunction(opts);\n\n    return result[index].url;\n}</code>\n        </deckgo-highlight-code>\n<p><strong>The result was:</strong></p>\n<p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 71.42857142857143%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <div class=\"embedVideo-container\"> <iframe title src=\"https://www.youtube.com/embed/uHTgDEU5ziE?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" allowfullscreen></iframe> </div> </div></p>\n<hr>\n<h2>Right, and didn’t you find any problem on the journey?</h2>\n<p>Yeah, how wouldn’t I? The main problem is, by Whatsapp policies we are not allowed on automating our accounts.\nBut, once the app emulates a browser, they won’t notice unless you add your bot to many chats and the volume of messages gets too high.</p>\n<p>So my tip is, don’t do that! Keep it just for personal use.</p>\n<h2>The end!</h2>\n<p>So again, the code is at <a href=\"https://github.com/Futebot/futezap\">https://github.com/Futebot/futezap</a> and is open-source.</p>\n<p>A big thanks to <a href=\"https://github.com/fsantarelli\">Felipe Santarelli</a> for providing a SIM Card for the Bot, to <a href=\"https://github.com/alephmelo\">Aleph Melo</a> for Dockerizing it and <a href=\"https://github.com/leeeandroo\">Leeeandroo</a> for documenting.</p>","frontmatter":{"title":"A bit of fun improving our Whatsapp Group.","date":"October 26, 2020","description":"Sometimes a Whatsapp group can become quiet, not really much to talk about. So why not shake things up?"}}},"pageContext":{"slug":"/automating-a-whatsapp-group/","previous":{"fields":{"slug":"/why-do-i-develop-free-stuff/"},"frontmatter":{"title":"How far can I go to provide free apps?"}},"next":null}},"staticQueryHashes":["1246554614","2841359383","3271880064"]}